@page "/"
@using System.Text;
@using Image.Analyze.Azure.Ai.Lib;
@using Image.Analyze.Azure.Ai.Models;
@using Ocr.Handwriting.Azure.AI.Services;
@using global::Azure.AI.Vision.Common;
@using global::Azure.AI.Vision.ImageAnalysis;
@using global::Azure;
@using Image.Analyze.Azure.Ai.Extensions;

@inject IImageSaveService ImageSaveService
@inject IImageAnalyzerService ImageAnalyzerService
@inject IJSRuntime JsRunTime

<h1>Image Analyzer</h1>

App that load and analyze using Azure Cognitive Services - Image Vision Analyzing service.

<span>@ImageInfo</span>

<EditForm Model="Model" OnValidSubmit="@Submit" style="background-color:aliceblue">
    <DataAnnotationsValidator />
    <label><b>Select a picture to run OCR</b></label><br />
    <InputFile OnChange="@OnInputFile" accept=".jpeg,.jpg,.png" />
    <br />
    <code class="alert-secondary">Supported file formats: .jpeg, .jpg and .png</code>
    <br />
    @if (Model.PreviewImageUrl != null)
    {
        <label class="alert-info">Preview of the selected image</label>
        <div style="overflow:auto;max-height:500px;max-width:700px">
            <img id="PreviewImage" class="flagIcon" src="@Model.PreviewImageUrl" /><br />
        </div>

        <code class="alert-light">File Size (kB): @Model.FileSize</code>
        <br />
        <code class="alert-light">File saved location: @Model.SavedFilePath</code>
        <br />

        <label class="alert-info">Click the button below to start running OCR using Azure AI</label>

        <br />
        <br />
        <button type="submit">Submit</button> <button style="margin-left:200px" type="button" class="btn-outline-info" @onclick="@CopyTextToClipboard">Copy to clipboard</button>
        <br />
        <br />
        <InputTextArea style="width:1000px;height:300px" readonly="readonly" placeholder="Detected text in the image uploaded" @bind-Value="Model!.ImageAnalysisOutputText" rows="5"></InputTextArea>
    }
</EditForm>


@code {

    private IndexModel Model = new();

    //https://learn.microsoft.com/en-us/azure/ai-services/computer-vision/how-to/call-analyze-image-40?WT.mc_id=twitter&pivots=programming-language-csharp

    private string ImageInfo = string.Empty;

    private async Task Submit()
    {
        if (Model.PreviewImageUrl == null || Model.SavedFilePath == null)
        {
            await Application.Current.MainPage.DisplayAlert($"MAUI Blazor Image Analyzer App", $"You must select an image first before running Image Analysis. Supported formats are .jpeg, .jpg and .png", "Ok", "Cancel");
            return;
        }

        using var imageAnalyzer = await ImageAnalyzerService.CreateImageAnalyzer(Model.SavedFilePath);

        ImageAnalysisResult analysisResult = await imageAnalyzer.AnalyzeAsync();

        if (analysisResult.Reason == ImageAnalysisResultReason.Analyzed)
        {
            Model.ImageAnalysisOutputText = analysisResult.OutputImageAnalysisResult();
            JsRunTime.InvokeVoidAsync("LoadBoundingBoxes");

        }
        else
        {
            ImageInfo = $"The image analysis did not perform its analysis. Reason: {analysisResult.Reason}";
        }


        StateHasChanged(); //visual refresh here
    }

    private async Task CopyTextToClipboard()
    {
        await Clipboard.SetTextAsync(Model.ImageAnalysisOutputText);
        await Application.Current.MainPage.DisplayAlert($"MAUI Blazor Image Analyzer App", $"The copied text was put into the clipboard. Character length: {Model.ImageAnalysisOutputText?.Length}", "Ok", "Cancel");
    }

    private async Task OnInputFile(InputFileChangeEventArgs args)
    {
        var imageSaveModel = await ImageSaveService.SaveImage(args.File);
        Model = new IndexModel(imageSaveModel);
        await Application.Current.MainPage.DisplayAlert($"MAUI Blazor ImageAnalyzer app App", $"Wrote file to location : {Model.SavedFilePath} Size is: {Model.FileSize} kB", "Ok", "Cancel");
    }  


}
